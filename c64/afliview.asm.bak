;C64 executable code based on HermIRES's 'AFLI Exe' (Acme syntax version)
bmpdata=$0B00
bitmap=$4000
vidram=$6000
zpreg1=$fa
zpreg2=$fb
srcptr=$fc
tgtptr=$fe
titlePosY=1
titlePosX=$50
titleCol=1
titleSpr=$0c00
charROM=$d800

!to "afliview.prg",cbm
!sl "aflilabels.txt"

		*= $0801
!word ss,2022
!byte $9e
!text "2064"	;Sys 2064

ss
!word 0

*= $0810		;INITIALIZATION AT PROGRAM START - set IRQ handlers, screen, and main VIC registers
start	sei
		jsr udetect
		lda #$35
		sta $01
		jsr Init
		;jsr wrtitle
		lda #$02
		sta $dd00

rastlp	lda #$2e	;2
-		cmp $d012	;4
		bne -		;2/3

		nop			;2
		lda #$00	;2
		sta $d021	;4

del		ldy #01		;2		PAL = 1 NTSC = 3
-		dey			;2
		bne -		;3/2

		;nop			;2
		;nop			;2
		;nop			;2
nt0		lda #$ea	;2-4
nt1		lda #$ea	;2-4
		
		ldy #25		;2	will count rows
-		ldx #$38	;2	shift badlines up, because no badline/DMA possible after line $f8
		lda #$80	;2
		stx $d011	;4	trigger badline
		sta $d018	;4	change video-ram (colour)
		eor $d02f	;4	wait for 6 cycles (can be a useful command too...)
nt2		lda #$ea	;2-4
		lda #$90	;2	etc...
		inx			;2
		stx $d011	;4
		sta $d018	;4
		eor $d02f	;4	wait for 6 cycles (can be a useful command too...)
nt3		lda #$ea	;2-4
		lda #$a0	;2
		inx			;2	(14)
		stx $d011
		sta $d018
		eor $d02f	;4	;wait for 6 cycles (can be a useful command too...)
nt4		lda #$ea
		lda #$b0
		inx
		stx $d011
		sta $d018
		eor $d02f	;4	;wait for 6 cycles (can be a useful command too...)
nt5		lda #$ea
		lda #$c0
		inx
		stx $d011
		sta $d018
		eor $d02f	;4	;wait for 6 cycles (can be a useful command too...)
nt6		lda #$ea
		lda #$d0
		inx
		stx $d011
		sta $d018
		eor $d02f	;4	;wait for 6 cycles (can be a useful command too...)
nt7		lda #$ea
		lda #$e0
		inx			;2
		stx $d011	;4
		sta $d018	;4
nt8		lda #$ea	;2
		nop			;2
		nop			;2
		lda #$f0	;2
		inx			;2
		stx $d011
		sta $d018-$3f,x ;sta $d018 with one extra cycle
		dey
		bpl -

		lda #$fa
-		cmp $d012
		bne -	
		lda #$17	;2
		sta $d011	;4	open vertical border - part 1	
		;lda #3		;2
		;sta $d02f	;sta $dd00	;4
		;lda #0		;2
		;sta $d017	;4	Y-expand
		;sta $d01c	;4 sprite mc
		;lda #$18	;2
		;sta $d018	;4
		ldx #3
-		dex
		bne -
		;lda bordercol
		;sta $d021
; 		ldy #15
; -		lda #titleCol
; 		sta $d027,y
; 		lda titleCoord,y
; 		sta $d000,y
; 		dey
; 		bpl -
		
		lda #titlePosY-1
-		cmp $d012
		bne -
		ldx #4
-		dex
		bne -
		lda #0 ;self-modified code, to border-colour if caption is empty
		sta $d021
		lda #titlePosY+3
-		cmp $d012
		bne -
nt9		nop ;lda #$ea
		lda #$18	;open border - part2
		sta $d011
 		;ldy bordercol
 		ldx #22
-		dex
 		bne -
 		nop
 		nop
 		;sty $d021
 		;inx
 		;stx $d010
; 		lda #$40	;place AFLI-mark on screen
; 		sta $d000
; 		lda #12
; 		sta $d027
		
-		lda $d012
		bne -
		ldx #0
		stx $d015 	;hide unneeded sprites
		
		lda #$24
-		cmp $d012
		bne -
 		;lda #2
 		;sta $dd00
		;lda #$80
		;sta $d018
		lda #$6b
		sta $d015	;sprites enabled to hide FLI-bug & stabilize raster-effects along with badline
		;lda #$6b
		;sta $d017
		;sta $d01c
 		ldy #$0f
-		lda FLIbugCol2
 		sta $D027,y
 		lda VICdata,y
 		sta $d000,y
 		dey
 		bpl -
 		lda #0
 		sta $d010

		jmp rastlp

;--------------------------------------------------------
Init	;lda #2
		;sta $dd00
		ldy #$2f-1
-		lda VICdata,y
		sta $d000,y
		dey
		bpl -
		lda bmpdata+$3FE8 ;border-colour
		sta $d020
		sta $d021
		sta bordercol
		lda #$02;bmpdata+$3FE9 ;FLI-bug underlay-sprite $01 colour
		sta $d025
		lda #$03;bmpdata+$3FEA ;FLI-bug underlay-sprite $10 colour
		sta FLIbugCol2
		lda #$04;bmpdata+$3FEB ;FLI-bug underlay-sprite $11 colour
		sta $d026
		
		ldy #0			;copy bitmap & colour data to its place
		lda #<(bmpdata+$4000)
		ldx #>(bmpdata+$4000)
		sta srcptr+0
		stx srcptr+1
		lda #<(bitmap+$4000)
		ldx #>(bitmap+$4000)
		sta tgtptr+0
		stx tgtptr+1
		ldy #0
-		lda (srcptr),y
		sta (tgtptr),y
		iny
		bne -
		dec srcptr+1
		dec tgtptr+1
		lda tgtptr+1
		cmp #>(bitmap)
		bpl -
		
;		ldy #$3f
;-		lda #$ff ;0 ;tya
;		sta bitmap+$1f40,y
;		dey
;		bpl -
		ldy #7
-		lda #($1f40/$40)		;most pointers should be set by AFLI exporter of HermIRES instead
;		sta vidram+$3f8,y
;		sta vidram+$400+$3f8,y
;		sta vidram+$400*2+$3f8,y
;		sta vidram+$400*3+$3f8,y
;		sta vidram+$400*4+$3f8,y
;		sta vidram+$400*5+$3f8,y
;		sta vidram+$400*6+$3f8,y
		sta vidram+$400*7+$3f8,y
		lda #($1f80/$40)
		sta vidram+$400*7+$3f8+6 ;lowest (6th) sprite is shorter
		dey
		bpl -
		
		lda #0
		sta $3fff
		sta $7fff		;disable idle-graphics
		rts
		
; Detect C64 model
udetect:
	;sei
	lda #$FE
	and $DC0E
	sta $DC0E
	lda #$38
	sta $DC04
	lda #$4F
	sta $DC05
	lda $0314
	sta TIRQ
	lda #<MIRQ
	sta $0314
	lda $0315
	sta TIRQ+1
	lda #>MIRQ
	sta $0315
;Wait for raster line zero
.z1	lda $D012
	bne .z1
	lda $D011
	and #$80
	bne .z1
	sta Flg		;Clear test flag
	inc $DC0E	;Start timer
	cli
.f1	ldy Flg
	beq .f1		;Wait for test flag
	lda Ras
.s1	cmp #$0B	;PAL-B/G?
	beq .n0
	;no, adapt for NTSC/Drean
	lda #$ea
	sta nt0
	sta nt1
	sta nt2
	sta nt3
	sta nt4
	sta nt5
	sta nt6
	sta nt7
	sta nt8
	sta nt9
	dec rastlp+1
	lda #$05
	sta del+1
	
;
.n0	sei
	rts

MIRQ
	lda $DC0D
	cmp #$81
	bne .p1
	ldx Flg
	bne .p1
	inc Flg
	lda $D012
	sta Ras
	;inc V_BORDER
.p1	jmp $ea81

TIRQ	!byte 00,00
Flg	!byte 00
Ras	!byte 00	;PALG 11 NTSC 50 NTSCold 56 PALN 1
DELAYTIME !byte 00


             ;.0  .1  .2  .3  .4  .5  .6  .7  .8  .9  .A  .B  .C  .D  .E  .F
VICdata !byte $18,$84,$18,$30,titlePosX,titlePosY,$18,$5A,titlePosX+24,titlePosY,$18,$ae,$18,$d8,titlePosX+24*2,titlePosY ;$00..$0F
		!byte $00,$08,$2d,$00,$00,$6b,$08,$6b,$80,$01,$01,$ff,$6b,$00,$00,$00 ;$1$00..$1F
		!byte $00,$00,$00,$00,$00,$0d,$0e,$01,$02,$0f,$04,$0f,$06,$07,$0f     ;$2$00..$2e

bordercol !byte 0
FLIbugCol2 !byte 0 ;saved in file: colour for FLI-bug underlay-sprites

; AFLImark !byte %01001110,%01111011,%00011010
; 		 !byte %10011011,%01100011,%00011001
; 		 !byte %10011111,%01111011,%00011001
; 		 !byte %10011011,%01100011,%00011001
; 		 !byte %01011011,%01100011,%11011010

ENDOFCODE
!if ENDOFCODE >= bmpdata {
	!error "ERROR - TOO MUCH CODE BEFORE BITMAP-DATA! CHANGE BMPDATA ADDRESS!"
}
;====================================================================================================
!align $FF, $00	;Align to next page